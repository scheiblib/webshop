{"ast":null,"code":"import { of } from \"rxjs\";\nimport { environment } from \"../environment\";\nimport { Items } from \"../mock-item\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ItemService {\n  constructor(http) {\n    this.http = http;\n    this.apiServerUrl = environment.apiBaseUrl;\n  }\n  getItems() {\n    return of(Items);\n    // return this.http.get<User[]>(`${this.apiServerUrl}/users/findAllUsers`);\n  }\n\n  getUserById(id) {\n    const user = Items.find(i => i.id === id);\n    return of(user);\n  }\n  static #_ = this.ɵfac = function ItemService_Factory(t) {\n    return new (t || ItemService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ItemService,\n    factory: ItemService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAoBA,EAAE,QAAO,MAAM;AAGnC,SAAQC,WAAW,QAAO,gBAAgB;AAC1C,SAAQC,KAAK,QAAO,cAAc;;;AAKlC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,iBAAY,GAAGJ,WAAW,CAACK,UAAU;EAGL;EAExCC,QAAQ;IACN,OAAOP,EAAE,CAACE,KAAK,CAAC;IAChB;EACF;;EACAM,WAAW,CAACC,EAAU;IACpB,MAAMC,IAAI,GAAGR,KAAK,CAACS,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAE;IAC1C,OAAOT,EAAE,CAACU,IAAI,CAAC;EACjB;EAAC;qBAbUP,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAU,SAAXV,WAAW;IAAAW,YAFV;EAAM","names":["of","environment","Items","ItemService","constructor","http","apiBaseUrl","getItems","getUserById","id","user","find","i","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\schei\\Desktop\\thesis\\thesis-fe\\src\\app\\service\\item.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable, of} from \"rxjs\";\nimport {User} from \"../model/user\";\nimport {Item} from \"../model/item\";\nimport {environment} from \"../environment\";\nimport {Items} from \"../mock-item\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ItemService {\n  private apiServerUrl = environment.apiBaseUrl;\n\n\n  constructor(private http: HttpClient) { }\n\n  getItems(): Observable<Item[]> {\n    return of(Items);\n    // return this.http.get<User[]>(`${this.apiServerUrl}/users/findAllUsers`);\n  }\n  getUserById(id: number) {\n    const user = Items.find(i => i.id === id)!;\n    return of(user);\n  }\n\n  // public getItems(): Observable<Item[]> {\n  //   return this.http.get<Item[]>(`${this.apiServerUrl}/items/findAll`);\n  // }\n  //\n  // public getItemById(itemId: number): Observable<Item> {\n  //   return this.http.get<Item>(`${this.apiServerUrl}/items/findItemById/${itemId}`);\n  // }\n  //\n  // public addItems(items: []): Observable<Item[]> {\n  //   return this.http.post<Item[]>(`${this.apiServerUrl}/items/addItems`, items);\n  // }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}