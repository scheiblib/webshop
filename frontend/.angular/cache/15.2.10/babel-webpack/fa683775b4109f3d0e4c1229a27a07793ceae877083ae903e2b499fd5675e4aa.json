{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { inject } from \"@angular/core\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { UserService } from \"../../service/user.service\";\nimport { take } from 'rxjs';\nlet AuthComponent = class AuthComponent {\n  constructor() {\n    this.userService = inject(UserService);\n    this.isLoginMode = true;\n    this.isLoggedIn = false;\n    this.registrationSuccess = false;\n    this.name = '';\n    this.roles = [];\n    this.credentials = {\n      email: '',\n      password: ''\n    };\n  }\n  // register: Register = {\n  //   firstName: '',\n  //   lastName: '',\n  //   email: '',\n  //   password: '',\n  //   phone: '',\n  //   city: '',\n  //   address: '',\n  // }\n  ngOnInit() {\n    if (localStorage.getItem('auth-token') !== '') {\n      this.isLoggedIn = true;\n      this.setName();\n    }\n    this.loginForm = new FormGroup({\n      email: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required])\n    });\n    this.registrationForm = new FormGroup({\n      firstName: new FormControl('', [Validators.required]),\n      lastName: new FormControl('', [Validators.required]),\n      email: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required]),\n      phone: new FormControl('', [Validators.required]),\n      city: new FormControl('', [Validators.required]),\n      address: new FormControl('', [Validators.required])\n    });\n  }\n  login() {\n    this.userService.login(this.loginForm.value.username, this.loginForm.value.password).pipe(take(1)).subscribe(response => {\n      localStorage.setItem('auth-token', response.headers.get('auth-token') || '');\n      if (localStorage.getItem('auth-token') !== '') {\n        this.isLoggedIn = true;\n        this.setName();\n      }\n    });\n  }\n  register() {\n    this.userService.register(this.registrationForm.value.firstName, this.registrationForm.value.lastName, this.registrationForm.value.email, this.registrationForm.value.password, this.registrationForm.value.phone, this.registrationForm.value.city, this.registrationForm.value.address).pipe(take(1)).subscribe(response => {\n      this.registrationSuccess = true;\n    });\n  }\n  logout() {\n    localStorage.setItem('auth-token', '');\n    this.isLoggedIn = false;\n  }\n  onSwitchMode() {\n    this.isLoginMode = !this.isLoginMode;\n  }\n  onSubmit(form) {\n    console.log(form.value);\n    form.reset();\n  }\n  setName() {\n    const helper = new JwtHelperService();\n    const decodedToken = helper.decodeToken(localStorage.getItem('auth-token') || '');\n    this.name = decodedToken?.sub;\n    this.roles = decodedToken['roles'];\n  }\n};\nAuthComponent = __decorate([Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.css']\n})], AuthComponent);\nexport { AuthComponent };","map":{"version":3,"mappings":"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","names":["inject","Component","FormControl","FormGroup","Validators","JwtHelperService","UserService","take","AuthComponent","constructor","email","password","ngOnInit","localStorage","getItem","isLoggedIn","setName","loginForm","required","registrationForm","firstName","lastName","phone","city","address","login","userService","value","username","pipe","subscribe","response","setItem","headers","get","register","registrationSuccess","logout","onSwitchMode","isLoginMode","onSubmit","form","console","log","reset","helper","decodedToken","decodeToken","name","sub","roles","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\schei\\Desktop\\webshop\\frontend\\src\\app\\components\\auth\\auth.component.ts"],"sourcesContent":["import {inject, NgModule} from \"@angular/core\";\r\n\r\nimport { Component } from '@angular/core';\r\nimport {FormControl, FormGroup, NgForm, Validators} from \"@angular/forms\";\r\nimport {Register} from \"../../model/register\";\r\nimport {Login} from \"../../model/login\";\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport {UserService} from \"../../service/user.service\";\r\nimport { take } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  templateUrl: './auth.component.html',\r\n  styleUrls: ['./auth.component.css']\r\n})\r\nexport class AuthComponent {\r\n  userService = inject(UserService);\r\n\r\n  isLoginMode = true;\r\n  loginForm!: FormGroup;\r\n  registrationForm!: FormGroup;\r\n  isLoggedIn: boolean = false;\r\n  registrationSuccess: boolean = false;\r\n  name = '';\r\n  roles: string[] = [];\r\n\r\n  credentials: Login = {\r\n    email :'',\r\n    password :'',\r\n  }\r\n  // register: Register = {\r\n  //   firstName: '',\r\n  //   lastName: '',\r\n  //   email: '',\r\n  //   password: '',\r\n  //   phone: '',\r\n  //   city: '',\r\n  //   address: '',\r\n  // }\r\n\r\n  ngOnInit(): void {\r\n    if(localStorage.getItem('auth-token') !== '') {\r\n      this.isLoggedIn = true;\r\n      this.setName();\r\n    }\r\n    this.loginForm = new FormGroup({\r\n      email: new FormControl('', [Validators.required]),\r\n      password: new FormControl('', [Validators.required]),\r\n    });\r\n\r\n    this.registrationForm = new FormGroup({\r\n      firstName: new FormControl('', [Validators.required]),\r\n      lastName: new FormControl('', [Validators.required]),\r\n      email: new FormControl('', [Validators.required]),\r\n      password: new FormControl('', [Validators.required]),\r\n      phone: new FormControl('', [Validators.required]),\r\n      city: new FormControl('', [Validators.required]),\r\n      address: new FormControl('', [Validators.required]),\r\n    });\r\n  }\r\n\r\n  login() {\r\n    this.userService\r\n      .login(this.loginForm.value.username, this.loginForm.value.password)\r\n      .pipe(take(1))\r\n      .subscribe((response) => {\r\n        localStorage.setItem(\r\n          'auth-token',\r\n          response.headers.get('auth-token') || ''\r\n        );\r\n        if (localStorage.getItem('auth-token') !== '') {\r\n          this.isLoggedIn = true;\r\n          this.setName();\r\n        }\r\n      });\r\n  }\r\n\r\n  register() {\r\n    this.userService\r\n      .register(\r\n        this.registrationForm.value.firstName,\r\n        this.registrationForm.value.lastName,\r\n        this.registrationForm.value.email,\r\n        this.registrationForm.value.password,\r\n        this.registrationForm.value.phone,\r\n        this.registrationForm.value.city,\r\n        this.registrationForm.value.address,\r\n      )\r\n      .pipe(take(1))\r\n      .subscribe((response) => {\r\n        this.registrationSuccess = true;\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    localStorage.setItem('auth-token', '');\r\n    this.isLoggedIn = false;\r\n  }\r\n  onSwitchMode() {\r\n    this.isLoginMode = !this.isLoginMode;\r\n  }\r\n\r\n  onSubmit(form: NgForm) {\r\n    console.log(form.value);\r\n    form.reset();\r\n  }\r\n\r\n  private setName() {\r\n    const helper = new JwtHelperService();\r\n    const decodedToken = helper.decodeToken(\r\n      localStorage.getItem('auth-token') || ''\r\n    );\r\n    this.name = decodedToken?.sub;\r\n    this.roles = decodedToken['roles'];\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}